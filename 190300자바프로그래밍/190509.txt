Q3
to String
정수값 리턴하지말고 문자열로 바꿔서 리턴
Q4







/////Q5
public class Y extends X{ //

}
public class Z extends X{ //

}

/////Q6
public class A190509 { 

	public static void main(String[] args) {
		Object n[]=new Object[2];
		n[0]=new A();
		n[1]=new B();
		//Object n[]=(new A(), newB()); 하나의 문장으로 작성
	}

}


/////Q7

public class Player {
	
	private String name;
	public void setName(String name) {
		this.name=name;
	}
	public String getName() {
		return name;
	}


}


public class Test {
	public static void main(String[] args) {
		Player p=new Player();
		p.setName("마이클");
		System.out.println(p.getName());
	}
}

/////Q8
public class Test {
	public static void main(String[] args) {
		Object n[]= {new A(), new B(), new A(), newA()};
		int count=0;
		for(int i=0;i<n.length;i++) {
			if(n[i] instanceof A) count++;
		}
	}
}





오늘의수업
//추상클래스실습A
public abstract class Shape {
	abstract double getArea();
	
}

public class Rectangle extends Shape{
	int width, height;
	
	//생성자
	public Rectangle(int width, int height) {
		this.width=width;
		this.height=height;
	}
	
	@Override
	double getArea() {
		// TODO Auto-generated method stub
		return width*height;
	}

}

public class Test {
	public static void main(String[] args) {
		Rectangle r=new Rectangle(3,4);
		System.out.println(r.getArea());
	}
}

//추상클래스실습B
//인터페이스실습A

public interface ShapeAction {
	void moveTo(int x, int y);
	void setColor(int Color);
}

public class Rectangle implements ShapeAction{
	int x,y,width,weight;
	public Rectangle(int x, int y, int width, int height) {
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
	}
	@Override//지우면앙대 구현안할거면 비워둬야함
	public void moveTo(int x, int y) {
		// TODO Auto-generated method stub
		this.x=x;
		this.y=y;
	}

	@Override
	public void setColor(int Color) {
		// TODO Auto-generated method stub
		
	}
	public String toStirng() {
		//return "("+x+","+y+"),가로"
	}

}

public class Test {
	public static void main(String[] args) {
		Rectangle r=new Rectangle(50,70,3,4);
		r.moveTo(120,130);
		System.out.println(r);
	}
}

//인터페이스실습B

public interface ShapeAction {
	double getArea(); //인터페이스라서 추상키워드 안붙였대
	static final double PI=3.14159; //상수니까 static 객체라면 static 안쓴대, 안변해서 final
}

public class Circle implements ShapeAction{
	int radius;
	public Circle (int radius) {
		this.radius=radius;
	}
	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return ShapeAction.PI*radius*radius; //원의 면적 반환
	}
	
}


public class Test {
	public static void main(String[] args) {
		Circle c=new Circle(5);
		System.out.println(c.getArea());
	}
}