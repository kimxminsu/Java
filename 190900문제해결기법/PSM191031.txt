(5-2)4번-A
import java.util.LinkedList;

public class Test {
	public static void main(String[] args) {
		System.out.println(solveJosephusProblem(7, 3));
		
	}
	private static int solveJosephusProblem(int n,int k) {
		LinkedList<Integer> queue=new LinkedList<Integer>();
		for(int i=1;i<=n;i++) queue.addLast(i);
		
		while(queue.size()>1) { //큐크기>1:while문실행, 큐크기=1:출력
			for(int i=0;i<k-1;i++) { //k-1번 반복
//				int v=queue.removeFirst(); //큐에서 자료삭제하면서 변수 v에 저장
//				queue.addLast(v); //삭제한 값 뒤로 추가
				queue.addLast(queue.removeFrist());
			}
			queue.removeFirst(); //맨앞으로 이동된 삭제해야할 값(k번째)삭제
		}
		return queue.getFirst(); //마지막에 남은 유일한 하나의 값 불러오기(getFirst/getLast 둘다 상관X)
	}
}



#(6-1) 합 6번
public class Test {
	public static void main(String[] args) {
		int n[]= {7,2,8,4,1};
		System.out.println(sum(n,n.length-1)); //0부터 ?까지
		System.out.println(sum(n,0)); //0부터 시작해서 끝까지
	}
	private static int sum(int[] n,int i) { //배열 n의 0~i/0~n.length-1(끝)위치 원소들의 총합 반환
//		System.out.println(i);
//		if(i==0) return n[i];
//		return n[i]+sum(n,i-1);//0~(i-1)위치 원소들의 총합 더하기 n[i]
		return n[i]+sum(n,i+1);//0~n.length-1
		
	}
}

#(6-1) 7번
public class Test {
	public static void main(String[] args) {
		int n[]= {7,2,8,4,1};
		System.out.println(sum(n,n.length-1)); //length-1부터 0까지
		System.out.println(sum(n,0)); //0부터 시작해서 끝(length)까지
	}
	private static int sum(int[] n,int i) { //배열 n의 i~끝 위치 원소들의 총합 반환
		if(i==n.length-1) return n[i];
//		if(i==n.length) return 0;
		return n[i]+sum(n,i+1);//0~n.length-1
		
	}
}

#(6-1) 8번
public class Test {
	public static void main(String[] args) {
		int n[]= {5,1,8,3,2};
		System.out.println(max(n,n.length-1));
	}
	private static int max(int[] n,int i) { //배열 n의 0~i위치 원소들의 최대값 반환
//		1번
//		if(i==0) n[0];//0~0 위치 원소들의 최대값
//		int v1=n[i];
//		int v2=max(n,i-1);//0~(i-1)위치 원소들의 최대값
		
//		if(v1>v2) return v1;
//		else return v2;
		
//		return (v1>v2?v1:v2);
		
//		2번
//		if(i==0) return n[i]
//		return n[i]>max(n,i-1)?n[i]:max(n,i-1);
//		n[i]가 작거나 같(false)면 뒤에서 재귀호출함수를 또 써야됨 두번함
		
//		3번
//		if(i==0) return n[i];
//		return Math.max(n[i], max(n,i-1))
		
		
	}
}
