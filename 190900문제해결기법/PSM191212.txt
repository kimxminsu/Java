public class Test {
	public static void main(String[] args) {
		int n[]= {7,2,8,4,1};
		System.out.println(sum(n,n.length-1));
	}

	private static char[] sum(int[] n, int i) {
		if(i==0) return n[i];
//		if(i<) return 0; 이렇게 해도됨
		return n[i]+sum(n,i-1);
	}
}

#재귀6번_호출 다르게
public class Test {
	public static void main(String[] args) {
		int n[]= {7,2,8,4,1};
		System.out.println(sum(n,0)); //i부터 끝까지
		
	}

	private static char[] sum(int[] n, int i) {

		if(i==n.length-1) return n[i];
//		if(i>=n.length-1) return 0; //이렇게 해도됨 //곱셈일 경우는 return 1
		return n[i]+sum(n,i+1);
	}
}


#최대값
public class Test {
	public static void main(String[] args) {
		int n[]= {5,1,8,3,2};
		System.out.println(max(n,n.length-1)); //i부터 끝까지
		
	}

	private static char[] max(int[] n, int i) {
		if(i==0) return n[i];
//		if(i<0) return//생각 많이해야됨 ㅎㅎ...
		int v=max(n,i-1);
		return v>n[i]? v:n[i];
	}


}

#9번 총합
sum이 아니라 max임
public class Test {
	public static void main(String[] args) {
		int n[]= {5,1,8,3,2};
		System.out.println(max(n,0,n.length-1)); //i부터 끝까지
		
	}

	private static char[] max(int[] n, int i, int j) {
		if(low==high) return n[low];
		int m=(low+high)/2; //중간 찾기
		//low~m, m+1~high
		int v1=max(n,low, m), v2=max(n,m+1,high);//각자 왼쪽 오른쪽
		return v1>v2? v1 :v2; //2번 하기싷어서 저장했다가 다시쓰는거임
		
//		8,1 / 5,6
//		8/1 ->하나만 남음
	}
}

#대문자 변환
public class Test {
	public static void main(String[] args) {
		String s = "South, Korea 안녕"; //문자열로 하려면 string buffer쓰면됨
		char v[] = s.toCharArray();
		toUpper(v, 0);
		System.out.println(v);
	}

	private static void toUpper(char[] v, int i) {
		//i번째만 바꾸고 다음부터 i+1부터는 재귀호출
		
		if(i==v.length) return; //마지막 위치 도달, v.length-1 하면 변환해야되니까 마지막위치 다음에 이르면 몽드ㅜㄴ위치 검사,변환 됐으니까 할일 없어서 return
		
//		if(i==v.length-1) {
//			//검사 한번더해야됨
//		}
		if(v[i]>='a'&&v[i]<='z') v[i]+='A'-'a'; //소문자->대문자
		toUpper(v, i+1); //i값이 계속 증가
		
	}
}

#대문자 출현횟수
public class Test {
	public static void main(String[] args) {
		String s = "South, Korea";
		char v[] = s.toCharArray();
		System.out.println(countUpper(v, 0));
	}

	private static int countUpper(char[] v, int i) {
		//0이나 1의 회
		//배열에 있는 1,0의 횟수 더하면 대문자 출현횟수
		if(i==v.length) return 0;//마지막 위치(length-1) +1 =length 번째에는 넘어선거니까 0을 리턴
//		int count=0;
//		if(v[i]=='A'&&v[i]=='Z') count=1;
//		return count+countUpper(v, i+1) //i번째 문자에 대응하는 숫자+i+1번째 숫자
		return ((v[i]>='A'&&v[i]<='Z'?1:0)countUpper(v, i+1)); //맞나? 사진찍어놓은거 보고 수장하기
	}
}

#회귀? 대칭?
public class Test {
	public static void main(String[] args) {
		String s = "ABCDEDCBA";
		System.out.println(palindrome(s, 0)); //1==n, 2==n-1, 3==n-2 ... //i==s.length()-1-i
	}

	private static boolean palindrome(String s, int i) {
		if(i>=s.length()/2) return true; //if(==)해도 되는데 작을때 한다는 의미를 부여하기위해 >=로 쓴거임
//		ex)ABCDEDCBA 9/2=4
//		ex)짝수 8/2=4 //이 위치에 왔다는건 비교할거 다 해서 굳이 비교안해도됨
		
		return s.charAt(i)==s.charAt(s.length()-1-i) && palindrome(s, i+1);
	}
}


#앞뒤 교환
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int n[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
		reverse(n, 0);
		System.out.println(Arrays.toString(n));
	}

	private static void reverse(int[] n, int i) { //바꾸기만 하는거 앞에 문젠즌 대응하는지 비교하는거였는데
		
		//마지막크기검사는 펠린드롬처럼 /2한거
		if(i>=n.length/2) return; //이미 가운데 왔을때는 교환할 필요 없는거
		int temp=n[i];
		n[i]=n[n.length-1-i];
		n[n.length-1-i]=temp;
		reverse(n, i+1);
	}
}

#물웅덩이 코드는 그대로 하면 오류안남! 올려준대!

#해싱_3번_hashTableResize
배열에서 2배 늘리는 코드 참고

#4_자바에서 쓰는거 익히기

#6번-1
public class Test {
	public static void main(String[] args) {
		int n[]= {1,5,3,2,5,3,5};
		int maxCount=0, maxValue=n[0];
		
		for (int i = 0; i < n.length; i++) {
			int count=0;
			for (int j = 0; j < n.length; j++) if(n[i]==n[j]) count++; //n[i]의 빈도수가 count에 저장되어 있음.
			if(count>maxCount) {
				maxCount=count;
				maxValue=n[i];
			}
		}
	}
}

#6번-2
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int n[]= {1,5,3,2,5,3,5};
		Arrays.sort(n);
		int count=1, maxCount=0, maxValue=n[0];
		
		for (int i = 0; i < n.length; i++) {
			if(n[i-1]!=n[i]) {
				if(count>maxCount) {maxCount=count; maxValue=n[i-1];}
				count=0;
			}
			count++;
		}
		if(count>maxCount) {maxCount=count; maxValue=n[n.length-1];}
	}
}

#??
import java.util.Arrays;
import java.util.HashMap;

public class Test {
	public static void main(String[] args) {
		int n[]= {1,5,3,2,5,3,5};
		
		HashMap<Integer,Integer> ht=new HashMap<Integer,Integer>();
		for (int i = 0; i < n.length; i++) { //n번
			if(ht.containsKey(n[i])) ht.put(n[i], ht.get(n[i])+1); //contains=탐색 상수시간 put삽입상수시간 get탐색 상수시간 1+1+1=3
			else ht.put(n[i],1);
		}
		int maxCount=0, maxValue=n[0];
		for(int key:ht.keySet()) { //n번
			int count=ht.get(key);
			if(count>maxCount) {maxCount=count; maxValue=key; }
			
		}
		
		//총 2n번
//		이중루프 n^2, 정렬nlogn, 해싱n
	}
}

#??
import java.util.Arrays;
import java.util.HashMap;

public class Test {
	public static void main(String[] args) {
		int n[]= {1,5,3,2,5,3,5};
		
//		int maxCount=0,maxValue=n[0];
		int count[]=new int[101];
		for(int i=0;i<n.length;i++) count[n[i]]++; //n번
		for (int i = 0; i < count.length; i++) { //count배열크기만큼
			if(count[i]>maxCount) {
				maxCount=count[i];
				maxValue=i;
			}
		}
		
//		정수정렬(n+r)
		//괴장히 좋은데 정수일때밖에 안되니까 한계가 있음
	}
}








#이진탐색트리 비재귀
**inorder문제는 수업시간에 해서 생략한거

	public BinaryTree search(int key) {		
		return searchRecur(root,key);
	}

	private BinaryTree searchRecur(BinaryTree node, int key) {
		if(node==null) return null;
		if(node.key==key) return node;
		if(node.key<key) return searchRecur(node.right,key);
		else return searchRecur(node.left, key)
	}



재귀부터 문제마니