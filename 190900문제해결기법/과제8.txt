1번
실습 #1
-내부 for문을 for (int j = 1; j < v.length - i; j++) 로 변경
public class Test {
    public static void main(String[] args) {
        int v[] = new int[]{5, 8, 1, 9, 3, 5, 1, 5};
        bubbleSort(v);
        System.out.println(Arrays.toString(v));
    }

    private static void bubbleSort(int[] v) {
        for (int i = 0; i < v.length; i++) {
            for (int j = 1; j < v.length - i; j++) { //내부 for문 범위 수정
                if (v[j - 1] > v[j]) {
                    int temp = v[j];
                    v[j] = v[j - 1];
                    v[j - 1] = temp;
                }
            }
        }
    }
}

실습 #2
-

2번
실습 #1
public class Test {
	public static void main(String[] args) {
		int v[] = new int[] { 5, 8, 1, 9, 3, 5, 1, 5 };
		selectionSort(v);
		System.out.println(Arrays.toString(v));
	}

	private static void selectionSort(int[] v) {
		for (int i = 0; i < v.length - 1; i++) {
			int minPos = i;
			for (int j = i + 1; j < v.length; j++) {
				if (v[minPos] > v[j])
					minPos = j;
				if (minPos == i)
					continue;
			}
			int x = v[i];
			v[i] = v[minPos];
			v[minPos] = x;
		}
	}
}

3번
실습 #1
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int v[] = new int[] { 5, 8, 1, 9, 3, 5, 1, 5 };
		insertionSort(v);
		System.out.println(Arrays.toString(v));
	}

	private static void insertionSort(int[] v) {
		for (int i = 1; i < v.length; i++) {
			for (int j = i; j > 0 && v[j - 1] > v[j]; j--) {
				int x = v[j];
				v[j] = v[j - 1];
				v[j - 1] = x;
			}
		}
	}
}

4번
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int n[] = { 1, 3, 5, 7, 8 };
		int m[] = { 2, 4, 6, 7, 10 };
		int v[] = mergeArray(n, m);
		System.out.println(Arrays.toString(v));
	}

	private static int[] mergeArray(int[] n, int[] m) {
		int[] v = new int[n.length + m.length];
		int i = 0, j = 0, k = 0;
		while (i < n.length && j < m.length) {
			v[k++] = (n[i] < m[j]) ? n[i++] : m[j++];
		}
		while (i < n.length)
			v[k++] = n[i++];
		while (j < m.length)
			v[k++] = m[j++];
		return v;
	}
}

5번
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int v[] = { 1, 3, 5, 7, 8, 2, 4, 6, 7, 10 };
		mergeArray(v, 0, 4, 5, 9); // v의 부분 배열들 v[0..4], v[5..9]이 정렬된 상태임
		System.out.println(Arrays.toString(v));
	}

	private static void mergeArray(int[] v, int left1, int right1, int left2, int right2) {
		int[] n=new int[right2-left1+1];
		int i=left1, j=left2, k=0;
		while (i<=right1&&j<=right2) n[k++]=(v[i]<v[j])? v[i++]:v[j++];
		while (i<=right1) n[k++]=v[i++];
		while (j<=right2) n[k++]=v[j++];
		for(i=left1, k=0;k<n.length;) v[i++]=n[k++];
	}
}

13번
public class Test {
	public static void main(String[]args) {
		int		v[]= {87,95,53,77,100,14};
		sort(v);
		System.out.println(Arrays.toString(v));
	}
	private static void sort(int[]v) {
		int		c[]=new int[101];
		for(int i=0; i<v.length; i++) c[v[i]]++;
		for(int i=0, k=0; i<c.length; i++) {
			if(c[i]>0) v[k++]=i;
		}
	}
}

14번
public class Test{
	public static void main(String[]args) {
		int		v[]= {87,95,53,77,100,95,14};
		sort(v);
		System.out.println(Arrays.toString(v));
	}
	private static void sort(int[] v) {
		int		c[]=new int[101];
		for(int i=0; i<v.length; i++) c[v[i]]++;
		for(int i=0, k=0; i<c.length; i++) {
			while(c[i]-->0) v[k++]=i;
		}
	}
}

15번
public class Test{
	public static void main(String[]args) {
		int		v[]= {10005,10002,10002,10001,10003};
		sort(v);
		System.out.println(Arrays.toString(v));
	}
	private static void sort(int[]v) {
		int		min=v[0], max=v[0];
		for(int i=0; i<v.length; i++) {
			if(min>v[i]) min=v[i];
			if(max<v[i]) max=v[i];
		}
		int		c[]=new int[max-min+1];
		for(int i=0; i<v.length; i++) c[v[i]-min]++;
		for(int i=0, k=0; i<v.length; i++) {
			while(c[i]-->0) v[k++]=i+min;
		}
	}
}