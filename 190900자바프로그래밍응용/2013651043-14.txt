8장 이진탐색
실습1
1)
import java.util.Random;

public class Test {
	public static void main(String[] args) {
		int v[] = new int[1000000];
		Random random = new Random();
		for (int i = 0; i < v.length; i++)
			v[i] = random.nextInt(1000000);
		int key = 1234;
		System.out.println(search(v, key));
	}

	private static int search(int[] v, int key) {
		for(int i=0; i<v.length; i++) {
			if(v[i]==key) return i;
		}
		return -1;
	}
}

2)
import java.util.Random;

public class Test {
	public static void main(String[] args) {
		int v[] = new int[1000000];
		Random random = new Random();
		for (int i = 0; i < v.length; i++)
			v[i] = random.nextInt(1000000);
		int key = 1234;
		System.out.println(search(v, key));
	}

	private static int search(int[] v, int key) {
		int i=0;
		int lastValue=v[v.length-1];
		v[v.length-1]=key;
		while(v[i]!=key) i++;
		v[v.length-1]=lastValue;//복원
		if(i<v.length-1) return i;
		if(lastValue==key) return v.length-1;
		return -1;
	}
}

실습3
1)
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int v[] = { 2, 3, 6, 8, 9 };
		Arrays.sort(v); // 배열 정렬
		int key = 8;
		int index = binarySearch(v, key); // 정렬된 배열 내 자료 위치 이진 탐색
		if (index < 0)
			System.out.println("배열 내 자료 없음");
		else
			System.out.println("자료 발견 위치(배열 내 index): " + index);
	}

	private static int binarySearch(int[] v, int key) {
		int left = 0, right = v.length - 1;
		while (left <= right) {
			int m = (left / 2 + right / 2);
			if (key == v[m])
				return m;
			if (key < v[m])
				right = m - 1;
			else
				left = m + 1;
		}
		return -1;
	}
}
2)
import java.util.Arrays;

public class Test {
	public static void main(String[] args) {
		int v[] = { 2, 3, 6, 8, 9 };
		Arrays.sort(v); // 배열 정렬
		int key = 8;
		int index = binarySearch(v, key); // 정렬된 배열 내 자료 위치 이진 탐색
		if (index < 0)
			System.out.println("배열 내 자료 없음");
		else
			System.out.println("자료 발견 위치(배열 내 index): " + index);
	}

	private static int binarySearch(int[] v, int key) {
		int left = 0, right = v.length - 1;
//		while (left <= right) {
			int m = (left / 2 + right / 2);
//			if (key == v[m])
//				return m;
//			if (key < v[m])
//				right = m - 1;
//			else
//				left = m + 1;
//		}
//		return -1;
		if(left > right) return -1;
		if(key==v[m]) return m;
		if(key< v[m]) binarySearch(v, key)
	}
}
9장 이진탐색트리
1 
import java.util.LinkedList;

public class Test {
	public static void main(String[] args) {
		BinarySearchTree tree = new BinarySearchTree();
		int n[] = { 50, 20, 70, 10, 30, 5, 15, 25, 60, 90, 62, 65, 64, 35 };
		for (int i = 0; i < n.length; i++)
			tree.add(n[i]);
		System.out.println(tree.search(30));
		System.out.println(tree.search(33));
		System.out.println(tree);
		// System.out.println(BinarySearchTree.inorder(tree.root));
	}
}

class BinarySearchTree {
	class BinaryTree {
		int key;
		BinaryTree left, right;

		public BinaryTree(int key) {
			this.key = key;
		}

		@Override
		public String toString() {
			return Integer.toString(key);
		}
	}

	BinaryTree root;

	public void add(int key) {
		root = add(root, key);
	}

	private BinaryTree add(BinaryTree tree, int key) {
		if (tree == null)
			return new BinaryTree(key);
		if (tree.key < key)
			tree.right = add(tree.right, key);
		else if (tree.key > key)
			tree.left = add(tree.left, key);
		else
			; // value 삽입 시 else tree.value=value;
		return tree;
	}

	public BinaryTree search(int key) {
		BinaryTree node = root;
		while (node != null) {
			if (node.key == key)
				return node;
			if (node.key < key)
				node = node.right;
			else
				node = node.left;
		}
		return node;
	}

	@Override
	public String toString() {
		return levelOrder().toString();
	}

	private LinkedList<BinaryTree> levelOrder() {
		LinkedList<BinaryTree> list = new LinkedList<>();
		LinkedList<BinaryTree> queue = new LinkedList<>();
		if (root != null)
			queue.addLast(root);
		while (!queue.isEmpty()) {
			BinaryTree node = queue.removeFirst();
			list.add(node);
			if (node.left != null)
				queue.addLast(node.left);
			if (node.right != null)
				queue.addLast(node.right);
		}
		return list;
	}
	public BinaryTree search(int key) {
		return searchRecur(root,key);
	}
	private BinaryTree searchRecur(BinaryTree node, int key) {
		if(node==null) return null;
		if(node.key==key) return node;
		if(node.key<key) return
	}
	public static String inorder(BinaryTree node) {
		if(node==null) return "";
		return inorder(node.left)+""+node.key+""+inorder(node.right);
	}
				
	}
	
}
}

10장 이진힙
실습5
