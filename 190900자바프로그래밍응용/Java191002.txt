퀴즈



#2

public class Baby {
	double weight;
}

public class Test {
	public static void main(String[] args) {
		Baby b=new Baby();
		b.weight=1.2;
		System.out.println(b.weight);
		Baby v[];
		v=new Baby[1];
		v[0]=b;
		System.out.println(v[0].weight);
	}

}

#3

public class Car {
	public Car(String id,String sizeType) {
		this.id=id;
		this.sizeType=sizeType;
		
	}
	String id,sizeType;
	public String toString() {
		return id+","+sizeType;
	}

}


public class Test {
	public static void main(String[] args) {
		Car c1=new Car("05허1234","중형");
		Car c2=new Car("05허5678","소형");
		System.out.println(c1.toString());
		//syso해서 (object x)
		System.out.println(c1);
		//tostring생략해도 알아서 됨
		Car v[]= {c1,c2};
		for(int i=0;i<v.length;i++) {
			System.out.println(v[i]);
		}
	}

}

#4

public class GPS {
	int latitude;
	int longitude;
}

public class Vehicle {
	String id;
	GPS location=new GPS();
}



public class Test {
	public static void main(String[] args) {
		Vehicle c=new Vehicle();
		c.id="05허1234";
		c.location.latitude=132;
		c.location.longitude=37;
		System.out.println(c.id+","+c.location.latitude+","+c.location.longitude);
		Vehicle v[]={c};
		System.out.println(v[0].id+","+v[0].location.latitude+","+v[0].location.longitude);
		
		
	}

}



#4_수업에서 한거

public class GPS {
	int latitude;
	int longitude;
}

public class Vehicle {
	String id;
//	GPS location=new GPS();//여기서 해도되나요?
	GPS location;
}

public class Test {
	public static void main(String[] args) {
		Vehicle c=new Vehicle();
		c.id="05허1234";//c.id=new String("05~");
		c.location=new GPS();// 여기
		c.location.latitude=132;//location에 주소값:0
		c.location.longitude=37;
		System.out.println(c.id+","+c.location.latitude+","+c.location.longitude);
		Vehicle v[]={c};
		System.out.println(v[0].id+","+v[0].location.latitude+","+v[0].location.longitude);
		
		
	}

}

#5


public class X extends Object{
	//기본생성자
	public X() {
		//Object(); (x)
		super();
	}
}

public class Test {
	public static void main(String[] args) {
		X x=new X();
		System.out.println(x.toString());
		
	}

}


#6

public class Stat {
	public static int sum(int i,) { //static 없으면 오류
		
		
	}
}


public class Test {
	public static void main(String[] args) {
		int v=Stat.sum(11,22);//33반환
		//new 할때마다 실시간 동적으로 만들어짐
		//반대는 정적으로 만들어짐
		//static=클래스 만들때 이미 존재하는 요소,객체로 만들지 않아도
//		
//		Stat stat=new Stat();
//		int v=stat.sum(11,22); //Stat클래스에서 static 안쓰면 이렇게 두줄
	}

}


#7


public class Num {
	public static double PI.3.14;//static 꼭 써야됨
}


public class Test {
	public static void main(String[] args) {
		
		double v=num.PI*2*2;
//		Math.PI//상수값처럼 쓸수있는게 static필드로 이미 제공됨
	}

}



#8
Talbe,Chair클래스
public class Test {
	public static void main(String[] args) {
		Table t=new Table();//객체 만듦
		t.id="TV";
		Chair c=new Chair();//기본생성자 이용
		c.id="fjks";
		
		//타입이 다른데 공통이 object니까 
		Object v[]=new Object[2]; //Object부모클래스의 참조변수는
		
		v[0]=t;//자식객체참조가 가능하다
		v[1]=c;
	}

}

#9


public class Dog extends Animal{
	
	String name;
	
	
	public Dog(String id,String name) {
//		this.id=id;//내거 //그런데 하나밖에 없음 this가 부모이자 내거
//		super();//==new Animal(); Animal에는 기본생성자가 없음 !! 그래서 오류 !!
//		super.id=id;//그런데 하나밖에없으니까 상속받은거라서 super가 더 정확 //얘도 기본생성자 필요
		super(id);//new Animal("A-001");메소드가 있음 //기본생성자 필요없음
		this.name=name;
	}
	
	
//	String id;//부모한테받은 아이디랑 내 아이디랑 헷갈림
	//super.id-받은거, this.id-내거
	
	
	@Override
	public String toString() {
//		return super.id+","+this.name;//이거보다
		return super.toString()+","+this.name;//이게 더 정확 길어지면 유용하게씀
	}
}




public class Animal {
	
	
	String id;
	
	public Animal() { //기본 생성자

		
	}
	
	public Animal(String id) {//생성자 함수는 생성자이름앞에 자료형(returntype)안씀
		this.id=id;
	}
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}
}
